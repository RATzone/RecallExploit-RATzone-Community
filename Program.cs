using System;
using System.Collections.Generic;
using System.Linq;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;

namespace RecallExploit2
{
    internal class Program
    {
        public delegate void SpellCallback(Obj_AI_Base target);

        public class SpellAction
        {
            public SpellCallback CallbackObject;

            public SpellAction(SpellCallback func)
            {
                CallbackObject = func;
            }
        }

        private static Dictionary<string, SpellAction[]> ChampionSpellAction = new Dictionary<string, SpellAction[]>
        {
            {
                "Sivir", new[] 
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.ServerPosition); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); })
                }
            },
            {
                "Irelia", new[] //not working always
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, target); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, target); })
                }
            },
            {
                "Vayne", new[] //not working always
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, target); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Riven", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Kalista", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, Player.Position); })
                }
            },
            {
                "Skarner", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Shen", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Yasuo", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Graves", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Ryze", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Gangplank", new[] //Always
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Lee Sin", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, Player.Position); })
                }
            },
            {
                "Alistar", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, Player.Position); })
                }
            },
            {
                "Braum", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, Player.Position); })
                }
            },
            {
                "Nidalee", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, Player.Position); })
                }
            },
            {
                "Kassadin", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.R, Player.Position); })
                }
            },
            {
                "Yorick", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Draven", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Caitlyn", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Gragas", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Vladymir", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Rengar", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Pantheon", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q, Player.Position); })
                }
            },
            {
                "Hecarim", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Lucian", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.Q); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.E, Player.Position); })
                }
            },
            {
                "Janna", new[]
                {
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.R); }),
                    new SpellAction(target => { Player.Spellbook.CastSpell(SpellSlot.W, target); })
                }
            },
        };

        private static Obj_AI_Hero Player = ObjectManager.Player;

        private static Vector3 TeamSpawnPos;

        private static readonly string[] NoAttacks =
        {
            "jarvanivcataclysmattack", "monkeykingdoubleattack",
            "shyvanadoubleattack", "shyvanadoubleattackdragon", "zyragraspingplantattack", "zyragraspingplantattack2",
            "zyragraspingplantattackfire", "zyragraspingplantattack2fire", "viktorpowertransfer", "sivirwattackbounce"
        };

        private static readonly string[] Attacks =
        {
            "caitlynheadshotmissile", "frostarrow", "garenslash2",
            "kennenmegaproc", "lucianpassiveattack", "masteryidoublestrike", "quinnwenhanced", "renektonexecute",
            "renektonsuperexecute", "rengarnewpassivebuffdash", "trundleq", "xenzhaothrust", "xenzhaothrust2",
            "xenzhaothrust3", "viktorqbuff"
        };

        private static int DoExploitState;
        private static int _time;
        private static Obj_AI_Minion closestminion;

        private static uint hotkey = 0x24;

        private static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += Game_OnGameLoad;
        }

        private static void Game_OnGameLoad(EventArgs args)
        {
            TeamSpawnPos = ObjectManager.Get<Obj_SpawnPoint>().FirstOrDefault(obj => obj.IsAlly).Position;

            Drawing.OnDraw += OnDraw;
            Game.OnWndProc += GameOnWndProc;
            Game.OnUpdate += OnUpdate;
            Obj_AI_Base.OnProcessSpellCast += OnProcessSpellCast;
        }

        private static void GameOnWndProc(WndEventArgs args)
        {
            if (args.Msg == 0x100) //WM_KEYDOWN
            {
                if (args.WParam == hotkey && DoExploitState == 0)
                {
                    _time = Environment.TickCount;
                    DoExploitState = 2;
                }
            }
        }

        private static void OnDraw(EventArgs args)
        {
            if (DoExploitState > 0)
                Drawing.DrawText(Drawing.Width/2 - 300, Drawing.Height/2 - 300, System.Drawing.Color.Red,
                    "Recall Exploit Active with state: {0}", DoExploitState.ToString());

            if (closestminion == null)
                return;


            if (DoExploitState == 3)
            {
                Player.Spellbook.CastSpell(SpellSlot.Recall);
                Utility.DelayAction.Add(2,
                    () => { ChampionSpellAction[Player.ChampionName][0].CallbackObject(closestminion); });

                DoExploitState = 4;
            }

            if (DoExploitState == 4)
            {
                Utility.DelayAction.Add(2, 
                    () => { Player.IssueOrder(GameObjectOrder.AttackUnit, closestminion); });
                Utility.DelayAction.Add(4,
                    () => { ChampionSpellAction[Player.ChampionName][1].CallbackObject(closestminion); });
            }
        }

        private static void OnUpdate(EventArgs args)
        {
            if (Environment.TickCount - _time > 4500 && DoExploitState >= 0)
                DoExploitState = 0;

            if (Player.Distance(TeamSpawnPos) <= 4000F)
                DoExploitState = 0;

            if (DoExploitState == 0)
                return;

            closestminion =
                ObjectManager.Get<Obj_AI_Minion>()
                    .Where(unit => unit.IsEnemy && unit.IsVisible)
                    .OrderBy(unit => unit.Distance(Player))
                    .First();

            if (closestminion == null)
                return;

            if (DoExploitState == 1)
            {
                Player.IssueOrder(GameObjectOrder.AttackUnit, closestminion);
                DoExploitState = 2;
            }
        }

        private static void OnProcessSpellCast(Obj_AI_Base sender, GameObjectProcessSpellCastEventArgs args)
        {
            if (sender.IsMe && IsAutoAttack(args.SData.Name) && DoExploitState == 2)
            {
                DoExploitState = 3;
            }
        }

        public static bool IsAutoAttack(string name)
        {
            return (name.ToLower().Contains("attack") && !NoAttacks.Contains(name.ToLower())) ||
                   Attacks.Contains(name.ToLower());
        }
    }
}
